namespace CaptainLogger.Extensions.Generator;

[Generator]
public class CodeGenerator : ISourceGenerator
{
    internal const string INDENT = "    ";
    internal const string LOGGER_PROP = "RuntimeLogger";

    public void Execute(GeneratorExecutionContext context)
    {
        if (context.SyntaxContextReceiver is not SyntaxReceiver sr)
        {
            return;
        }

        try
        {
            var generics = GetGenericArgs(sr.ArgumentsCount);

            if (sr.ArgumentsCount > 0)
            {
                context.AddSource("CaptainLogger.CptLoggerMessagesDefinitions",
                    SourceText.From(MessagesDefinitions.Get(sr.ArgumentsCount, sr.Templates),
                    Encoding.UTF8));
            }

            context.AddSource("CaptainLogger.CptLoggerExtensions",
                SourceText.From(CptLoggerExtensions.Get(sr.ArgumentsCount),
                Encoding.UTF8));
        }
        catch (Exception ex)
        {
            sr.GeneratorLogger.Add($"Error!!!\r\n{ex}");
        }

#if DEBUG
        context
            .AddSource("Logs", SourceText.From($@"// <auto-generated last-generation=""{DateTime.Now}"" />
/*
{string.Join(Environment.NewLine, sr.GeneratorLogger)}
*/", Encoding.UTF8));
#endif
    }

    public void Initialize(GeneratorInitializationContext context) => context
        .RegisterForSyntaxNotifications(() => new SyntaxReceiver());

    internal static string GetLogLevel(int logLevel) => logLevel switch
    {
        1 => "Trace",
        2 => "Debug",
        3 => "Information",
        4 => "Warning",
        5 => "Error",
        6 => "Critical",
        _ => "Information"
    };

    internal static string GetGenericArgs(int arguments)
    {
        var args = "";
        for (var i = 0; i <= arguments; i++)
        {
            args += $"T{i}, ";
        }

        if (args.Length > 0)
        {
            args = args.Remove(args.Length - 2, 2);
        }

        return args;
    }

    internal static string GetSignatureArgs(int arguments)
    {
        var args = "";
        for (var i = 0; i <= arguments; i++)
        {
            args += @$"
        T{i} arg{i},";
        }

        if (args.Length > 0)
        {
            args = args.Remove(args.Length - 1, 1);
        }

        return args;
    }

    internal static string GetCallParamArgs(int arguments)
    {
        var args = "";
        for (var i = 0; i <= arguments; i++)
        {
            args += @$"
                arg{i},";
        }

        if (args.Length > 0)
        {
            args = args.Remove(args.Length - 1, 1);
        }

        return args;
    }

    internal static string GetTemplateString(int arguments)
    {
        // Argument 1: {Arg0}"" + Environment.NewLine + "Argument 2: {Arg1}
        var tpl = "";

        var newLine = @""" + Environment.NewLine + 
            """;

        for (var i = 0; i < arguments; i++)
        {
            tpl += $"Argument {i + 1}: {{Arg{i}}}{newLine}";
        }

        if (tpl.Length > 0)
        {
            tpl = tpl.Remove(tpl.Length - newLine.Length, newLine.Length);
        }

        return $"\"{tpl}\"";
    }
}

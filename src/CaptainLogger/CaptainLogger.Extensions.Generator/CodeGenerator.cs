namespace CaptainLogger.Extensions.Generator;

[Generator]
public class CodeGenerator : ISourceGenerator
{
    private const string INDENT = "    ";
    private const string LOGGER_PROP = "RuntimeLogger";

    public void Execute(GeneratorExecutionContext context)
    {
        if (context.SyntaxContextReceiver is not SyntaxReceiver sr)
            return;

        try
        {
            context
                .AddSource("CaptainLogger.CptLoggerExtensions",
                SourceText.From(GetCptLoggerExt(sr.ArgumentsCount),
                Encoding.UTF8));
        }
        catch (Exception ex)
        {
            sr.GeneratorLogger.Add($"Error!!!\r\n{ex}");
        }

#if DEBUG
        context
            .AddSource("Logs", SourceText.From($@"// <auto-generated last-generation=""{DateTime.Now}"" />
/*
{string.Join(Environment.NewLine, sr.GeneratorLogger)}
*/", Encoding.UTF8));
#endif
    }

    public void Initialize(GeneratorInitializationContext context) => context
        .RegisterForSyntaxNotifications(() => new SyntaxReceiver());

    private string GetCptLoggerExt(int arguments)
    {
        var sb = new StringBuilder();
        sb
            .Append($"// <auto-generated last-generation=\"{DateTime.Now}\" />")
            .Append(@$"

namespace CaptainLogger;

{GetComments("CptLoggerExtensions: Extension Methods creation is bound to <c>LogArguments<c/> count provided in the configuration")}
public static class CptLoggerExtensions
{{
");
        if (arguments > 0)
        {
            for (int i = 1; i < 7; i++)
                GetMethods(sb, arguments, logLevel: i);
        }

        sb.Append("}");

        return sb.ToString();
    }

    private string GetIndent(int indentation)
    {
        var indent = "";
        for (int i = 0; i < indentation; i++)
            indent += INDENT;

        return indent;
    }

    private string GetComments(string mex, int indentation = 0)
    {
        var indent = GetIndent(indentation);

        return @$"{indent}/// <summary>
{indent}/// {mex}
{indent}/// </summary>";
    }

    private void GetMethods(
        StringBuilder sb,
        int arguments,
        int logLevel)
    {
        if (logLevel <= 0)
            return;

        var level = logLevel switch
        {
            1 => "Trace",
            2 => "Debug",
            3 => "Information",
            4 => "Warning",
            5 => "Error",
            6 => "Critical",
            _ => "Info"
        };

        var comment = GetComments($"Extends <c>{level}</c> log.", 1);

        AddMethods(sb, arguments, level, comment);
    }

    private void AddMethods(
        StringBuilder sb,
        int arguments,
        string level,
        string comment)
    {
        for (int i = 0; i <= arguments; i++)
        {

            sb.Append(@$"
{comment}");

            sb.Append(@$"
    public static void {level}Log<{GetGenericArgs(i)}>(
        this ICaptainLogger cpt,
        string message,{GetSignatureArgs(i)})
    {{
        if (cpt.{LOGGER_PROP}.IsEnabled(LogLevel.{level}))
            cpt.{LOGGER_PROP}.Log{level}(
                message,{GetCallParamArgs(i)});
    }}
");

            sb.Append(@$"
{comment}");

            sb.Append(@$"
    public static void {level}Log<{GetGenericArgs(i)}>(
        this ICaptainLogger cpt,
        string message,{GetSignatureArgs(i)},
        Exception exception)
    {{
        if (cpt.{LOGGER_PROP}.IsEnabled(LogLevel.{level}))
            cpt.{LOGGER_PROP}.Log{level}(
                exception,
                message,{GetCallParamArgs(i)});
    }}
");
        }
    }

    private string GetGenericArgs(int arguments)
    {
        var args = "";
        for (int i = 0; i <= arguments; i++)
            args += $"T{i},";

        if (args.Length > 0)
            args = args.Remove(args.Length - 1, 1);

        return args;
    }

    private string GetSignatureArgs(int arguments)
    {
        var args = "";
        for (int i = 0; i <= arguments; i++)
            args += @$"
        T{i} arg{i},";

        if (args.Length > 0)
            args = args.Remove(args.Length - 1, 1);

        return args;
    }

    private string GetCallParamArgs(int arguments)
    {
        var args = "";
        for (int i = 0; i <= arguments; i++)
            args += @$"
                arg{i},";

        if (args.Length > 0)
            args = args.Remove(args.Length - 1, 1);

        return args;
    }
}

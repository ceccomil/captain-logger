namespace CaptainLogger.Extensions.Generator.Generators;

[Generator]
internal sealed class CaptainLoggerExtensionsGenerator : IIncrementalGenerator
{
  public void Initialize(IncrementalGeneratorInitializationContext context)
  {
    context.RegisterSourceOutput(
      context.GetBaseProvider(),
      (x, y) => Execute(x, y.Options, y.IsNullable));
  }

  private static void Execute(
    SourceProductionContext context,
    ImmutableArray<LoggerOptionsDefinition> lods,
    bool nullable)
  {
    if (lods.IsDefaultOrEmpty)
    {
      return;
    }

    var lod = lods[0];

    for (var i = 1; i < lods.Length; i++)
    {
      context.ReportWarning(
        "CLG001",
        $"Only the first {nameof(CaptainLoggerOptions)} configuration found is used.",
        "CaptainLogger.Extensions.Generator");
    }

    GenerateExtensions(
      context,
      lod,
      nullable);
  }

  private static void GenerateExtensions(
    SourceProductionContext context,
    LoggerOptionsDefinition lods,
    bool nullable)
  {
    var methods = new StringBuilder();

    for (var i = 0; i < 6; i++)
    {
      GenerateMethods(
        methods,
        (LogLevel)i,
        lods.ArgumentsCount);
    }

    var code =
      $$"""
      {{CodeExtensions.AutoGeneratedComment}}
      {{nullable.ToNullableDirectiveIfEnabled()}}
      
      using System;
      using Microsoft.Extensions.Logging;

      namespace CaptainLogger.Generated;

      {{CodeExtensions.GeneratedCodeAttribute("CaptainLogger.Extensions.Generator")}}
      public static class CaptainLoggerExtensions
      {
        {{methods}}
      }
      """;

    context.AddSource(
      $"CaptainLoggerExtensions.g.cs",
      code.GetFormattedCode());
  }

  private static void GenerateMethods(
    StringBuilder methods,
    LogLevel logLevel,
    int argsCount)
  {
    for (var i = 1; i <= argsCount; i++)
    {
      GenerateArgsOverloads(
        methods,
        logLevel,
        i);
    }
  }

  private static void GenerateArgsOverloads(
    StringBuilder methods,
    LogLevel logLevel,
    int currentArgs)
  {
    var parameters = string.Join(
        ", ",
        Enumerable
        .Range(1, currentArgs)
        .Select(x => $"T{x} arg{x}"));

    var args = string.Join(
      ", ",
      Enumerable
      .Range(1, currentArgs)
      .Select(x => $"arg{x}"));

    var generics = string.Join(
      ", ",
      Enumerable
      .Range(1, currentArgs)
      .Select(x => $"T{x}"));

    var code =
      $$"""
      public static void {{logLevel}}Log<{{generics}}>(this ILogger logger, {{parameters}}, Exception? ex = null)
      {
        if (!logger.IsEnabled(LogLevel.{{logLevel}}))
        {
          return;
        }

        CaptainLoggerMessages<{{generics}}>.{{logLevel}}Log(logger, {{args}}, ex);
      }
      """;

    methods.AppendLine(code);
    methods.AppendLine();
  }
}

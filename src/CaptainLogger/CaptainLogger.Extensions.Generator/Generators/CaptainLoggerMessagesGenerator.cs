namespace CaptainLogger.Extensions.Generator.Generators;

[Generator]
internal sealed class CaptainLoggerMessagesGenerator : IIncrementalGenerator
{
  public void Initialize(IncrementalGeneratorInitializationContext context)
  {
    context.RegisterSourceOutput(
      context.GetBaseProvider(),
      (x, y) => Execute(x, y.Options, y.IsNullable));
  }

  private static void Execute(
    SourceProductionContext context,
    ImmutableArray<LoggerOptionsDefinition> lods,
    bool nullable)
  {
    if (lods.IsDefaultOrEmpty)
    {
      return;
    }

    var lod = lods[0];

    GenerateMessages(
      context,
      lod,
      nullable);
  }

  private static void GenerateMessages(
    SourceProductionContext context,
    LoggerOptionsDefinition lods,
    bool nullable)
  {
    var classes = new StringBuilder();

    for (var i = 1; i <= lods.ArgumentsCount; i++)
    {
      lods.Templates.TryGetValue(
        i,
        out var template);

      GenerateClass(
        classes,
        i,
        template);
    }

    var code =
      $$"""
      {{CodeExtensions.AutoGeneratedComment}}
      {{nullable.ToNullableDirectiveIfEnabled()}}
      
      using System;
      using Microsoft.Extensions.Logging;

      namespace CaptainLogger.Generated;

      {{classes}}
      """;

    context.AddSource(
      $"CaptainLoggerMessages.g.cs",
      code.GetFormattedCode());
  }

  private static void GenerateClass(
    StringBuilder classes,
    int argsCount,
    ExpressionSyntax? templateSyntax)
  {
    var parameters = string.Join(
        ", ",
        Enumerable
        .Range(1, argsCount)
        .Select(x => $"T{x} arg{x}"));

    var args = string.Join(
      ", ",
      Enumerable
      .Range(1, argsCount)
      .Select(x => $"arg{x}"));

    var generics = string.Join(
      ", ",
      Enumerable
      .Range(1, argsCount)
      .Select(x => $"T{x}"));

    var template =
      templateSyntax?.ToString()
      ?? "\"" + string.Join(
        " - ",
        Enumerable
        .Range(1, argsCount)
        .Select(x => $"{{logValue{x}}}")) + "\"";

    var methods = new StringBuilder();

    for (var i = 0; i < 6; i++)
    {
      var logLevel = (LogLevel)i;

      var actionAndMethod =
        $$"""
        private static readonly Action<ILogger, {{generics}}, Exception?> {{logLevel}}Action = LoggerMessage
          .Define<{{generics}}>(LogLevel.{{logLevel}}, new EventId(1, nameof(CaptainLoggerMessages<{{generics}}>)), {{template}});
        
        public static void {{logLevel}}Log(ILogger logger, {{parameters}}, Exception? ex = null) => {{logLevel}}Action(
          logger, 
         {{args}},
          ex);
        """;

      methods.AppendLine(actionAndMethod);
      methods.AppendLine();
    }

    var code =
      $$"""

      {{CodeExtensions.GeneratedCodeAttribute("CaptainLogger.Extensions.Generator")}}
      {{CodeExtensions.BrowsableAttribute}}
      internal static class CaptainLoggerMessages<{{generics}}>
      {
        {{methods}}
      }
      """;

    classes.AppendLine(code);
    classes.AppendLine();
  }
}

namespace CaptainLogger.Extensions.Generator;

internal static class CptLoggerExtensions
{
    internal static string Get(int arguments)
    {        
        var sb = new StringBuilder();
        sb
            .Append($"// <auto-generated last-generation=\"{DateTime.Now}\" arguments-count=\"{arguments}\" />")
            .Append(@$"
using System;
using Microsoft.Extensions.Logging;

namespace CaptainLogger;

#nullable enable
{GetComments("CptLoggerExtensions: Extension Methods creation is bound to <c>LogArguments</c> count provided in the configuration")}
public static class CptLoggerExtensions
{{
");
        if (arguments > 0)
        {
            for (int i = 1; i < 7; i++)
                GetMethods(sb, arguments, logLevel: i);
        }

        sb.Append(@"}
#nullable disable");

        return sb.ToString();
    }

    private static string GetIndent(int indentation)
    {
        var indent = "";
        for (int i = 0; i < indentation; i++)
            indent += INDENT;

        return indent;
    }

    private static string GetComments(string mex, int indentation = 0)
    {
        var indent = GetIndent(indentation);

        return @$"{indent}/// <summary>
{indent}/// {mex}
{indent}/// </summary>";
    }

    private static void GetMethods(
        StringBuilder sb,
        int arguments,
        int logLevel)
    {
        if (logLevel <= 0)
            return;

        var level = GetLogLevel(logLevel);

        var comment = GetComments($"If enabled, write a <see cref=\"LogLevel.{level}\"/> log entry", 1);

        AddMethods(sb, arguments, level, comment);
    }

    private static void AddMethods(
        StringBuilder sb,
        int arguments,
        string level,
        string comment)
    {
        for (int i = 0; i < arguments; i++)
        {
            sb.Append(@$"
{comment}");

            sb.Append(@$"
    public static void {level}Log<{GetGenericArgs(i)}>(
        this ICaptainLogger cpt,{GetSignatureArgs(i)}) => CptLoggerMessagesDefinitions{i + 1}<{GetGenericArgs(i)}>
            .{level}Log(cpt.{LOGGER_PROP},{GetCallParamArgs(i)});
");

            sb.Append(@$"
{comment}");

            sb.Append(@$"
    public static void {level}Log<{GetGenericArgs(i)}>(
        this ICaptainLogger cpt,{GetSignatureArgs(i)},
        Exception ex) => CptLoggerMessagesDefinitions{i + 1}<{GetGenericArgs(i)}>
            .{level}Log(cpt.{LOGGER_PROP},{GetCallParamArgs(i)},
                ex);
");
        }
    }
}
namespace CaptainLogger.Contracts.Generator;

[Generator]
public class CodeGenerator : ISourceGenerator
{
    public void Execute(GeneratorExecutionContext context)
    {
        if (context.SyntaxContextReceiver is not SyntaxReceiver sr || sr.ArgumentsCount <= 0)
            return;

        context
            .AddSource("CaptainLogger.CptLoggerExtensions",
            SourceText.From(GetCptLoggerExt(sr.ArgumentsCount),
            Encoding.UTF8));

#if DEBUG
        context
            .AddSource("Logs", SourceText.From($@"// <auto-generated last-generation=""{DateTime.Now}"" />
/*
{string.Join(Environment.NewLine, sr.GeneratorLogger)}
*/", Encoding.UTF8));
#endif
    }

    public void Initialize(GeneratorInitializationContext context) => context
        .RegisterForSyntaxNotifications(() => new SyntaxReceiver());

    private string GetCptLoggerExt(int arguments)
    {
        var code = @"// <auto-generated last-generation=""{DateTime.Now}"" />
namespace CaptainLogger;

/// <summary>
/// CptLoggerExtensions
/// </summary>
public static class CptLoggerExtensions
{
    /// <summary>
    /// Extends TraceLog with arguments
    /// </summary>
    public static void TraceLog<T0>(
        this ICaptainLogger cpt,
        string message,
        T0 arg0)
    {
        if (cpt.Logger.IsEnabled(LogLevel.Trace))
            cpt.Logger.LogTrace(
                message,
                arg0);
    }

    /// <summary>
    /// Extends TraceLog with arguments
    /// </summary>
    public static void TraceLog<T0>(
        this ICaptainLogger cpt,
        string message,
        T0 arg0,
        Exception exception)
    {
        if (cpt.Logger.IsEnabled(LogLevel.Trace))
            cpt.Logger.LogTrace(
                exception,
                message,
                arg0);
    }
}
";
        return code;
    }
}
